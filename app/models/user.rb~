require 'digest'
class User < ActiveRecord::Base

  email_regex= /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  attr_accessible :username, :email, :enabled,:password, :password_confirmation, :profile, :last_login_at
  attr_accessor :password
  validates :username, :presence=>true,
                   :length =>{:maximum=>50 }
  validates :email, :presence=>true,
                    :format=> {:with => email_regex},
                    :uniqueness=>{:case_sensitive=>false}, :on=> :create
  validates :password, :presence => true,
                       :confirmation =>true,
                       :length =>{:within=>6..40}, :on=> :create
  validates :profile, :length=>{:maximum=>1000}, :on=> :create
  before_save :encrypt_password, :except=> :update
  has_and_belongs_to_many :roles
  has_many :uploads
  def has_role?(role_name)
    self.roles.find_by_name(role_name)? true :false
  end
  def has_password?(submitted_password)
     hashed_password==encrypt(submitted_password)
  end
  def self.authenticate(email, submitted_password)
     user=find_by_email(email)
     return nil if user.nil?
     if user.has_password?(submitted_password)  
	   user.update_column(:last_login_at, DateTime.current)
            return user
     end 
  end

  def self.authenticate_with_salt(id,cookie_salt)
       user= find_by_id(id)
       (user && user.salt == cookie_salt) ? user : nil
  end

  def self.status(user)
    if user.enabled
	"Active"
    else 
	"Inactive"
    end
  end
  private
    def encrypt_password
       self.salt=make_salt if new_record?
       self.hashed_password=encrypt(password)
    end
   
	
    
    def encrypt(string)
       secure_hash("#{salt}--#{string}")
    end
    def make_salt
       secure_hash("#{Time.now.utc}--#{password}")
    end
    def secure_hash(string)
       Digest::SHA2.hexdigest(string)
    end
end
